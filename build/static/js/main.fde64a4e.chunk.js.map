{"version":3,"sources":["Components/Celebration/index.js","utils/index.js","Components/Flashcard/index.js","Screens/Home/index.js","Screens/Learn/index.js","Screens/Practice/index.js","Screens/Vocabulary/index.js","Components/BottomNavigationBar/index.js","serviceWorker.js","index.js"],"names":["Celebration","active","config","angle","spread","startVelocity","elementCount","dragFriction","duration","stagger","width","height","colors","getLearntGermanWords","a","async","get","getSpeaker","lang","counter","word","speechSynthesis","window","speech","SpeechSynthesisUtterance","rate","speak","getMeaning","meaning","words","germanToEnglishMapping","keys","Object","values","englishToGerman","i","length","getEnglishToGermanMapping","bracketIndex","indexOf","substring","trim","Flashcard","type","onCorrectAnswer","onWrongAnswer","onLearnt","style","onDismissed","notActionable","useState","answer","setAnswer","error","setError","confettiActive","setConfettiActive","isPractice","isLearn","isReview","onSubmit","e","preventDefault","toLowerCase","setTimeout","display","flexDirection","alignItems","justifyContent","CardContent","Typography","color","gutterBottom","variant","component","IconButton","onClick","CardActions","margin","TextField","value","onChange","newValue","target","Button","currentAnswer","currentMeaning","newAnswer","Fragment","randomFlashcardConfig","Math","random","germanWords","floor","randWord","Card","props","isIn","Fade","in","Home","list","setList","itemCount","pow","itemHeight","itemWidth","itemSize","index","max","document","documentElement","clientHeight","innerHeight","isItemLoaded","loadMoreItems","startIndex","endIndex","newList","item","push","onItemsRendered","ref","position","transform","onExit","splice","randomGermanWord","excludedWords","getRandWord","includes","Learn","setWord","setIsIn","useEffect","styles","container","overflow","transition","setNewWord","learntGermanWords","Slide","direction","mountOnEnter","unmountOnExit","find","set","getGetter","source","prev","learnt","randIndex","getLearntGermanWord","getLearntEnglishWord","englishWords","console","log","getRandomGermanWord","getRandomEnglishWord","Practice","onlyLearnt","setOnlyLearnt","nextWord","newWord","onSkip","Tooltip","title","Fab","bottom","right","Vocabulary","learntWords","setLearntWords","renderRow","ListItem","key","ListItemText","primary","secondary","StyledBottomNavigationAction","withStyles","root","maxWidth","background","BottomNavigationAction","StyledBottomNavigation","boxShadow","zIndex","BottomNavigation","BottomNavigationBar","history","useHistory","location","pathname","replace","setValue","showLabels","event","label","icon","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","App","minWidth","minHeight","path","exact","ReactDOM","render","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fde64a4e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Confetti from \"react-dom-confetti\";\r\nimport { Card, CardContent, CardActions, Typography, Button } from \"@material-ui/core\";\r\n\r\nconst Celebration = ({active}) => {\r\n  const confettiConfig = {\r\n    angle: \"90\",\r\n    spread: 90,\r\n    startVelocity: 45,\r\n    elementCount: 50,\r\n    dragFriction: 0.1,\r\n    duration: 2000,\r\n    stagger: 0,\r\n    width: \"10px\",\r\n    height: \"10px\",\r\n    colors: [\"#a864fd\", \"#29cdff\", \"#78ff44\", \"#ff718d\", \"#fdff6a\"]\r\n  };\r\n\r\n  return (\r\n    <Confetti active={active} config={confettiConfig} />\r\n  );\r\n}\r\n\r\nexport default Celebration;\r\n","import { get } from \"idb-keyval\";\r\nimport words from \"../german-english.json\";\r\n\r\nexport const getLearntGermanWords = async () =>\r\n  (await get(\"learnt-german-words\")) || [];\r\n\r\nexport const getEnglishToGermanMapping = (germanToEnglishMapping = words) => {\r\n  let keys = Object.keys(germanToEnglishMapping);\r\n  let values = Object.values(germanToEnglishMapping);\r\n\r\n  let englishToGerman = {};\r\n  for (let i = 0; i < keys.length; ++i) {\r\n    englishToGerman[values[i]] = keys[i];\r\n  }\r\n\r\n  return englishToGerman;\r\n};\r\n\r\nexport const getSpeaker = (lang = \"de-DE\") => {\r\n  let counter = 1;\r\n  return word => {\r\n    const speechSynthesis = window.speechSynthesis;\r\n    const SpeechSynthesisUtterance = window.SpeechSynthesisUtterance;\r\n    let speech = new SpeechSynthesisUtterance(word);\r\n    speech.lang = lang;\r\n    speech.rate = counter % 2 === 0 ? 0.5 : 1;\r\n    speechSynthesis.speak(speech);\r\n    ++counter;\r\n  };\r\n};\r\n\r\nexport function vh(v) {\r\n  var h = Math.max(\r\n    document.documentElement.clientHeight,\r\n    window.innerHeight || 0\r\n  );\r\n  return (v * h) / 100;\r\n}\r\n\r\nexport const getMeaning = word => {\r\n  let meaning = words[word] || getEnglishToGermanMapping()[word];\r\n  if (!meaning) {\r\n    return \"\";\r\n  }\r\n  let bracketIndex = meaning.indexOf(\"(\") === -1 ? 0 : meaning.indexOf(\"(\");\r\n  return meaning.substring(bracketIndex).trim();\r\n};\r\n","import React, { useState } from \"react\";\r\nimport words from \"../../german-english.json\";\r\nimport VolumeUpOutlinedIcon from \"@material-ui/icons/VolumeUpOutlined\";\r\nimport {\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  Button,\r\n  Typography,\r\n  TextField,\r\n  IconButton\r\n} from \"@material-ui/core\";\r\nimport Celebration from \"../Celebration\";\r\nimport { getSpeaker, getMeaning } from \"../../utils\";\r\n\r\nconst Flashcard = ({\r\n  word,\r\n  type,\r\n  onCorrectAnswer = () => {},\r\n  onWrongAnswer = () => {},\r\n  onLearnt = () => {},\r\n  width = \"80vw\",\r\n  height = \"80vh\",\r\n  style,\r\n  onDismissed = () => {},\r\n  notActionable\r\n}) => {\r\n  let meaning = getMeaning(word);\r\n  let [answer, setAnswer] = useState(\"\");\r\n  let [error, setError] = useState(false);\r\n  let [confettiActive, setConfettiActive] = useState(false);\r\n\r\n  const isPractice = type === \"practice\";\r\n  const isLearn = type === \"learn\";\r\n  const isReview = type === \"review\";\r\n\r\n  const onSubmit = e => {\r\n    e && e.preventDefault && e.preventDefault();\r\n    if (answer.toLowerCase().trim() === meaning.toLowerCase().trim()) {\r\n      onCorrectAnswer({ meaning, word, type });\r\n      setConfettiActive(true);\r\n      setTimeout(() => {\r\n        setConfettiActive(false);\r\n      }, 0);\r\n      setAnswer(\"\");\r\n      setError(false);\r\n    } else {\r\n      setError(true);\r\n      onWrongAnswer({ meaning, word, type });\r\n    }\r\n  };\r\n\r\n  const speak = getSpeaker();\r\n\r\n  return (\r\n    <Card\r\n      style={{\r\n        ...style,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"space-between\",\r\n        width,\r\n        height\r\n      }}\r\n    >\r\n      <CardContent\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\"\r\n        }}\r\n      >\r\n        <Typography color=\"textSecondary\" gutterBottom>\r\n          {isPractice || isReview\r\n            ? `What is the meaning of ${word}?`\r\n            : \"Learn a new word\"}\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          {word}\r\n        </Typography>\r\n        {isLearn ? (\r\n          <Typography variant=\"h6\" component=\"h5\" color=\"textSecondary\">\r\n            {meaning}\r\n          </Typography>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {words[word] ? (\r\n          <IconButton onClick={() => speak(word)}>\r\n            <VolumeUpOutlinedIcon />\r\n          </IconButton>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </CardContent>\r\n      <CardActions\r\n        style={{\r\n          margin: \"50px\"\r\n        }}\r\n      >\r\n        {isPractice || isReview ? (\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"stretch\"\r\n            }}\r\n          >\r\n            <form onSubmit={onSubmit}>\r\n              <TextField\r\n                error={error}\r\n                type=\"text\"\r\n                value={answer}\r\n                onChange={e => {\r\n                  let newValue = e.target.value;\r\n                  setAnswer(newValue);\r\n                }}\r\n              />\r\n            </form>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                margin: \"10px\"\r\n              }}\r\n            >\r\n              <Button onClick={onSubmit} variant=\"contained\" color=\"primary\">\r\n                Submit\r\n              </Button>\r\n              <Button\r\n                onClick={() => {\r\n                  let currentAnswer = answer.toLowerCase();\r\n                  let currentMeaning = meaning.toLowerCase();\r\n                  let newAnswer = \"\";\r\n\r\n                  for (let i = 0; i < currentMeaning.length; ++i) {\r\n                    newAnswer += currentMeaning[i];\r\n                    if (currentMeaning[i] !== currentAnswer[i]) {\r\n                      setAnswer(newAnswer);\r\n                      return;\r\n                    }\r\n                  }\r\n\r\n                  if (currentAnswer.length > currentMeaning.length) {\r\n                    setAnswer(currentMeaning);\r\n                  }\r\n                }}\r\n                color=\"primary\"\r\n              >\r\n                Hint\r\n              </Button>\r\n            </div>\r\n            <Celebration active={confettiActive} />\r\n          </div>\r\n        ) : notActionable ? (\r\n          \"\"\r\n        ) : (\r\n          <React.Fragment>\r\n            <Button\r\n              onClick={() => onLearnt({ meaning, word, type })}\r\n              color=\"primary\"\r\n            >\r\n              Got it\r\n            </Button>\r\n            <Button\r\n              onClick={() => onDismissed({ meaning, word, type })}\r\n              color=\"primary\"\r\n            >\r\n              Learn later\r\n            </Button>\r\n          </React.Fragment>\r\n        )}\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Flashcard;\r\n","import React, { useState } from \"react\";\r\nimport InfiniteLoader from \"react-window-infinite-loader\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport { Fade } from \"@material-ui/core\"\r\nimport { VariableSizeList as List } from \"react-window\";\r\nimport Flashcard from \"../../Components/Flashcard\";\r\nimport words from \"../../german-english.json\";\r\nimport { vh } from \"../../utils\";\r\n\r\nconst randomFlashcardConfig = type => {\r\n  if (type !== \"practice\" && type !== \"learn\") {\r\n    let randNum = Math.random() * 100;\r\n    type = randNum > 50 ? \"practice\" : \"learn\";\r\n  }\r\n\r\n  const randWord = () => {\r\n    let germanWords = Object.keys(words);\r\n    return germanWords[Math.floor(Math.random() * germanWords.length)];\r\n  }\r\n  let word = randWord();\r\n\r\n  let result = { type, word };\r\n\r\n  // const newWord = () => (result.word = randWord());\r\n  // if (type === \"learn\") {\r\n  //   result.onLearnt = newWord;\r\n  //   result.onDismissed = newWord;\r\n  // } else if (type === \"practice\") {\r\n  //   result.onCorrectAnswer = newWord;\r\n  // }\r\n\r\n  return result;\r\n}\r\n\r\nconst Card = props => {\r\n  let [isIn, setIsIn] = useState(true);\r\n\r\n  return (\r\n    <div>\r\n      <Fade in={isIn}>\r\n        <div>\r\n          <Flashcard \r\n            {...props}\r\n          />\r\n        </div>\r\n      </Fade>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Home = () => {\r\n  let [list, setList] = useState([]);\r\n  const itemCount = Math.pow(10, 4);\r\n  const percent = 80\r\n  const itemHeight = `${percent}vh`;\r\n  const itemWidth = `${percent}vw`;\r\n\r\n  const itemSize = index => {\r\n  \r\n    return (index % 2 === 0) ? vh(percent) : 20;\r\n  }\r\n\r\n  return (\r\n    <InfiniteLoader\r\n    isItemLoaded={index => !!(list[index])}\r\n    itemCount={itemCount}\r\n    loadMoreItems={(startIndex, endIndex) => {\r\n      let newList = [...list];\r\n      for (let i = startIndex; i < endIndex; ++i) {\r\n        const item = randomFlashcardConfig();\r\n        newList.push(item);\r\n      }\r\n      setList(newList);\r\n    }}\r\n    >\r\n        {({ onItemsRendered, ref }) => (\r\n          <AutoSizer>\r\n            {({width, height}) => (\r\n              <List\r\n                itemCount={itemCount}\r\n                onItemsRendered={onItemsRendered}\r\n                ref={ref}\r\n                itemSize={itemSize}\r\n                width={width}\r\n                height={height}\r\n              >\r\n                {\r\n                  ({index, style}) => {\r\n                    let props = {...(list[index])};\r\n                    return index % 2 === 0\r\n                    ?\r\n                    <Card\r\n                      width={itemWidth} \r\n                      height={itemHeight} \r\n                      style={{\r\n                        ...style,\r\n                        position: \"fixed\",\r\n                        transform: `translateX(calc((100vw - ${itemWidth})/2))`\r\n                      }}\r\n                      onExit={() => {\r\n                        setList([...list].splice(index, 1));\r\n                      }}\r\n                      {...props}\r\n                      notActionable\r\n                    />\r\n                    :\r\n                    <div style={style}></div>\r\n                  }\r\n                }\r\n              </List>\r\n            )}\r\n          </AutoSizer>\r\n        )}\r\n    </InfiniteLoader>\r\n  );\r\n}\r\n\r\nexport default Home;","import React, { useState, useEffect } from \"react\";\r\nimport { Slide } from \"@material-ui/core\";\r\nimport Flashcard from \"../../Components/Flashcard\";\r\nimport words from \"../../german-english.json\";\r\nimport { set } from \"idb-keyval\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport { getLearntGermanWords } from \"../../utils\";\r\n\r\nconst randomGermanWord = (excludedWords = []) => {\r\n  const germanWords = Object.keys(words);\r\n  const getRandWord = () =>\r\n    germanWords[Math.floor(Math.random() * germanWords.length)];\r\n  let word = getRandWord();\r\n\r\n  while (excludedWords.includes(word)) {\r\n    word = getRandWord();\r\n  }\r\n\r\n  return word;\r\n};\r\n\r\nconst Learn = () => {\r\n  let [word, setWord] = useState(\"\");\r\n  let [isIn, setIsIn] = useState(false);\r\n  useEffect(() => {\r\n    (async () => setWord(randomGermanWord(await getLearntGermanWords())))();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => setIsIn(true), 0);\r\n  }, []);\r\n\r\n  const styles = {\r\n    container: {\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n      overflow: \"hidden\"\r\n    }\r\n  };\r\n\r\n  const transition = () => {\r\n    setIsIn(false);\r\n    setTimeout(() => setIsIn(true), 200);\r\n  };\r\n\r\n  const setNewWord = async () => {\r\n    const learntGermanWords = await getLearntGermanWords();\r\n    setWord(randomGermanWord(learntGermanWords));\r\n  };\r\n\r\n  return (\r\n    <AutoSizer>\r\n      {({ width, height }) => (\r\n        <div style={{ ...styles.container, width, height }}>\r\n          <Slide\r\n            direction={isIn ? \"right\" : \"left\"}\r\n            in={isIn}\r\n            mountOnEnter\r\n            unmountOnExit\r\n          >\r\n            <div style={styles.container}>\r\n              <Flashcard\r\n                word={word}\r\n                type=\"learn\"\r\n                onLearnt={async ({ word }) => {\r\n                  // add word to learnt words\r\n                  const learntGermanWords = await getLearntGermanWords();\r\n                  if (!learntGermanWords.find(e => e === word)) {\r\n                    learntGermanWords.push(word);\r\n                  }\r\n                  await set(\"learnt-german-words\", learntGermanWords);\r\n                  // slide animation\r\n                  transition();\r\n                  await setNewWord();\r\n                }}\r\n                onDismissed={async () => {\r\n                  // slide animation\r\n                  transition();\r\n                  await setNewWord();\r\n                }}\r\n              />\r\n            </div>\r\n          </Slide>\r\n        </div>\r\n      )}\r\n    </AutoSizer>\r\n  );\r\n};\r\n\r\nexport default Learn;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Flashcard from \"../../Components/Flashcard\";\r\nimport words from \"../../german-english.json\";\r\nimport { get } from \"idb-keyval\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport FilterListOutlinedIcon from \"@material-ui/icons/FilterListOutlined\";\r\nimport LanguageOutlinedIcon from \"@material-ui/icons/LanguageOutlined\";\r\nimport { Fab, Tooltip } from \"@material-ui/core\";\r\n\r\nconst getGetter = source => {\r\n  let prev = \"\";\r\n\r\n  return async () => {\r\n    const learnt = (await source()) || [];\r\n    let randIndex = Math.floor(Math.random() * learnt.length);\r\n\r\n    let word = learnt[randIndex] || Object.keys(words)[randIndex];\r\n\r\n    while (word === prev && learnt.length > 2) {\r\n      randIndex = Math.floor(Math.random() * learnt.length);\r\n      word = learnt[randIndex] || words[randIndex];\r\n    }\r\n\r\n    prev = word;\r\n\r\n    return word;\r\n  };\r\n};\r\n\r\nconst getLearntGermanWord = getGetter(\r\n  async () => (await get(\"learnt-german-words\")) || []\r\n);\r\nconst getLearntEnglishWord = getGetter(async () => {\r\n  let germanWords = (await get(\"learnt-german-words\")) || [];\r\n  let englishWords = [];\r\n\r\n  for (let word of germanWords) {\r\n    englishWords.push(words[word]);\r\n  }\r\n  console.log(englishWords);\r\n  return englishWords;\r\n});\r\nconst getRandomGermanWord = getGetter(() => Object.keys(words));\r\nconst getRandomEnglishWord = getGetter(() => Object.values(words));\r\n\r\nconst getLearntWord = () =>\r\n  Math.random() > 0.5 ? getLearntGermanWord() : getLearntEnglishWord();\r\nconst getRandomWord = () =>\r\n  Math.random() > 0.5 ? getRandomGermanWord() : getRandomEnglishWord();\r\n\r\nconst Practice = () => {\r\n  let [word, setWord] = useState(\"\");\r\n  let [onlyLearnt, setOnlyLearnt] = useState(true);\r\n\r\n  const nextWord = async () => {\r\n    let newWord;\r\n    if (onlyLearnt) {\r\n      newWord = await getLearntWord();\r\n    } else {\r\n      newWord = await getRandomWord();\r\n    }\r\n    setWord(newWord);\r\n  };\r\n\r\n  useEffect(() => {\r\n    nextWord();\r\n  }, []);\r\n\r\n  return (\r\n    <AutoSizer>\r\n      {({ width, height }) => (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            overflow: \"hidden\",\r\n            width,\r\n            height\r\n          }}\r\n        >\r\n          <Flashcard\r\n            style={{ transform: \"translateY(-5vh)\" }}\r\n            type=\"practice\"\r\n            word={word}\r\n            onCorrectAnswer={() => {\r\n              nextWord();\r\n            }}\r\n            onSkip={nextWord}\r\n          />\r\n          <Tooltip title={onlyLearnt ? \"All words\" : \"Only from vocabulary\"}>\r\n            <Fab\r\n              onClick={() => {\r\n                setOnlyLearnt(!onlyLearnt);\r\n              }}\r\n              style={{\r\n                position: \"fixed\",\r\n                bottom: \"10vh\",\r\n                right: \"1vw\"\r\n              }}\r\n              color=\"primary\"\r\n            >\r\n              {onlyLearnt ? (\r\n                <LanguageOutlinedIcon />\r\n              ) : (\r\n                <FilterListOutlinedIcon />\r\n              )}\r\n            </Fab>\r\n          </Tooltip>\r\n        </div>\r\n      )}\r\n    </AutoSizer>\r\n  );\r\n};\r\n\r\nexport default Practice;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { VariableSizeList as List } from \"react-window\";\r\nimport { get } from \"idb-keyval\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  Typography,\r\n  IconButton,\r\n  ListItem,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport VolumeUpOutlinedIcon from \"@material-ui/icons/VolumeUpOutlined\";\r\nimport { getSpeaker, getLearntGermanWords, getMeaning } from \"../../utils\";\r\nimport words from \"../../german-english.json\";\r\n\r\nconst Vocabulary = () => {\r\n  let [learntWords, setLearntWords] = useState([]);\r\n  useEffect(() => {\r\n    (async () => {\r\n      setLearntWords(await getLearntGermanWords());\r\n    })();\r\n  }, []);\r\n  const itemSize = () => 60;\r\n\r\n  function renderRow(props) {\r\n    const { index, style } = props;\r\n    const speak = getSpeaker();\r\n    let word = learntWords[index];\r\n    let meaning = getMeaning(learntWords[index]);\r\n\r\n    return (\r\n      <ListItem style={style} key={index}>\r\n        <ListItemText primary={word} secondary={meaning} />\r\n        <IconButton onClick={() => speak(word)}>\r\n          <VolumeUpOutlinedIcon />\r\n        </IconButton>\r\n      </ListItem>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <AutoSizer>\r\n      {({ width, height }) => (\r\n        <List\r\n          itemCount={learntWords.length}\r\n          width={width}\r\n          height={height}\r\n          itemSize={itemSize}\r\n        >\r\n          {renderRow}\r\n        </List>\r\n      )}\r\n    </AutoSizer>\r\n  );\r\n};\r\n\r\nexport default Vocabulary;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  BottomNavigation,\r\n  BottomNavigationAction,\r\n  withStyles\r\n} from \"@material-ui/core\";\r\nimport MenuBookOutlinedIcon from \"@material-ui/icons/MenuBookOutlined\";\r\nimport HomeOutlinedIcon from \"@material-ui/icons/HomeOutlined\";\r\nimport CreateOutlinedIcon from \"@material-ui/icons/CreateOutlined\";\r\nimport SettingsOutlinedIcon from \"@material-ui/icons/SettingsOutlined\";\r\nimport BookOutlinedIcon from \"@material-ui/icons/BookOutlined\";\r\n\r\nconst StyledBottomNavigationAction = withStyles({\r\n  root: {\r\n    maxWidth: \"100vw\",\r\n    background: \"white\"\r\n  }\r\n})(BottomNavigationAction);\r\n\r\nconst StyledBottomNavigation = withStyles({\r\n  root: {\r\n    boxShadow: \"0 0 3px black\",\r\n    zIndex: 1\r\n  }\r\n})(BottomNavigation);\r\n\r\nconst BottomNavigationBar = () => {\r\n  let history = useHistory();\r\n  let [value, setValue] = useState(\r\n    window.location.pathname.replace(\"/\", \"\") || \"home\"\r\n  );\r\n\r\n  return (\r\n    <StyledBottomNavigation\r\n      showLabels\r\n      value={value}\r\n      onChange={(event, newValue) => {\r\n        setValue(newValue);\r\n        history.push(`/${newValue}`);\r\n      }}\r\n    >\r\n      <StyledBottomNavigationAction\r\n        label=\"Home\"\r\n        value=\"home\"\r\n        icon={<HomeOutlinedIcon />}\r\n      />\r\n      <StyledBottomNavigationAction\r\n        label=\"Learn\"\r\n        value=\"learn\"\r\n        icon={<MenuBookOutlinedIcon />}\r\n      />\r\n      <StyledBottomNavigationAction\r\n        label=\"Practice\"\r\n        value=\"practice\"\r\n        icon={<CreateOutlinedIcon />}\r\n      />\r\n      <StyledBottomNavigationAction\r\n        label=\"Vocabulary\"\r\n        value=\"vocabulary\"\r\n        icon={<BookOutlinedIcon />}\r\n      />\r\n      {/*<StyledBottomNavigationAction \r\n        label=\"Settings\"\r\n        value=\"settings\" \r\n        icon={<SettingsOutlinedIcon />} \r\n      />*/}\r\n    </StyledBottomNavigation>\r\n  );\r\n};\r\n\r\nexport default BottomNavigationBar;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"./Screens/Home\";\nimport Learn from \"./Screens/Learn\";\nimport Practice from \"./Screens/Practice\";\nimport Vocabulary from \"./Screens/Vocabulary\";\nimport BottomNavigationBar from \"./Components/BottomNavigationBar\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nconst App = () => {\n  return (\n    <div\n      style={{\n        minWidth: \"100vw\",\n        minHeight: \"100vh\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"\",\n        justifyContent: \"space-between\"\n      }}\n    >\n      <Router>\n        <Route path=\"/learn\">\n          <Learn />\n        </Route>\n        <Route path=\"/practice\">\n          <Practice />\n        </Route>\n        <Route path=\"/vocabulary\">\n          <Vocabulary />\n        </Route>\n        <Route path=\"/home\">\n          <Home />\n        </Route>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/\">\n          <BottomNavigationBar />\n        </Route>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.register();\n"],"sourceRoot":""}